ðŸ”¹ What is Operator Precedence?
     - Precedence defines which operator is evaluated first in an expression.
     - Associativity defines the order of evaluation if two operators have the same precedence.
     - ðŸ“˜ Example:
int x = 5 + 3 * 2; // * has higher precedence than + â†’ evaluated first
// Result: 5 + (3*2) = 11

âš¡ Java Operator Precedence & Associativity Table :
Note: Higher in the table â†’ higher precedence â†’ evaluated first
| Precedence | Operator(s)                                                                 | Description                                   | Associativity        |              |
| ---------- | --------------------------------------------------------------------------- | --------------------------------------------- | -------------------- | ------------ |
| 1          | `()`                                                                        | Parentheses (Grouping)                        | Left â†’ Right         |              |
| 2          | `[]`                                                                        | Array subscript                               | Left â†’ Right         |              |
| 2          | `.`                                                                         | Member access (dot)                           | Left â†’ Right         |              |
| 2          | `()`                                                                        | Method call                                   | Left â†’ Right         |              |
| 3          | `++` (postfix), `--` (postfix)                                              | Post-increment, post-decrement                | Left â†’ Right         |              |
| 4          | `++` (prefix), `--` (prefix), `+` (unary plus), `-` (unary minus), `!`, `~` | Unary operators                               | Right â†’ Left         |              |
| 5          | `*`, `/`, `%`                                                               | Multiplication, division, modulus             | Left â†’ Right         |              |
| 6          | `+`, `-`                                                                    | Addition, subtraction                         | Left â†’ Right         |              |
| 7          | `<<`, `>>`, `>>>`                                                           | Shift operators                               | Left â†’ Right         |              |
| 8          | `<`, `<=`, `>`, `>=`, `instanceof`                                          | Relational operators                          | Left â†’ Right         |              |
| 9          | `==`, `!=`                                                                  | Equality operators                            | Left â†’ Right         |              |
| 10         | `&`                                                                         | Bitwise AND                                   | Left â†’ Right         |              |
| 11         | `^`                                                                         | Bitwise XOR                                   | Left â†’ Right         |              |
| 12         | `\|`                                                                        | Bitwise OR                                    | Left â†’ Right         |              |
| 13         | `&&`                                                                        | Logical AND                                   | Left â†’ Right         |              |
| 14         | `\|\|`                                                                      | Logical OR                                    | Left â†’ Right         |              |
| 15         | `?:`                                                                        | Ternary conditional                           | Right â†’ Left         |              |
| 16         | `=`, `+=`, `-=`, `*=`, `/=`, `%=` , `&=`, `^=`, `                           | =`, `<<=`, `>>=`, `>>>=`                      | Assignment operators | Right â†’ Left |
| 17         | `,`                                                                         | Comma operator (used to separate expressions) | Left â†’ Right         |              |
