                                                             STRING
******************************************************************************************************************************************

                                                              ✅ EASY LEVEL (1-15)
                                                            --------------------------

(1) print sub string of a string ?
Input: 
String str=“abc”;
Output: a ab abc b bc c.

(2) toggle/ caseSwapper the string ?
Input: 
String str=“sAHil”;
Output: SahIL
    OR
 Input: 
String str=“Hello,World”;
Output: hELLO wORLD

(3) find vowels and convert into upper case then return string ?
Input: 
String str=“hello”;
Output: hEllO

(4) reverse the string ?
Input: 
String str=“hello”;
Output: olleh

(5) reverse each word string ?
Input: 
String str=“java code”;
Output: avaj edoc

(6) print count of characters of string and total length of string?
Input: 
String str=“sahil satish new delhi”;
Output: count = 19 , length = 22

(7) show index against of the characters ?
Input:
String str=”infotech”;
Output:   i=0
          n=1
          f=2
          o=3
          t=4
          e=5
          c=6
          h=7

(8) sort string alphabetically ?
Input: 
String str=“java”;
Output: aajv

(9) check is string palindrome or not ?
Input: 
String str=“racecar”;
Output: true

(10) remove duplicate character from string ?
Input: 
String str=“programing”;
Output: p a r g i m n o

(11) for given string check it is isogram or not?
Input : 
String str=“codedecode”;
Output: false
           OR
Input : 
String str=“pen”;
Output: true.
Note: An isogram is a word or phrase with no repeating letters.
      ex- "Big dwarf only jumps"

(12) LEFT STRING ROTATION FOR K TIMES ?
 Input: 
String str= “decode”;
int k = 2
 Output: codede.

(13) RIGHT STRING ROTATION FOR K TIMES?
 Input: 
String str = “decode”
int k = 2;
 Output: dedeco.

REGULAR EXPRESSION:                                  
(14) remove all white spaces from string ?
  Input 1: "    j   a  va   s   ta   r    ";
  Output: javastar
  Input 2: "   Hello  World   ";
  Output: HelloWorld
(15) remove special character from string ?
  Input 1 : "$ja!6va$&st%ar1";
  Output: javastar
  Input: "#ja!6va$&st%ar1";
  Output: #!$&%



                                                    🔸 Medium String Questions (1-16)
                                                 -----------------------------------------

(1) replace character with it’s occurrence ?
Input:
String str=”opentext”;
Output: open1ex2

(2) print ‘a’ instead of ‘ab’ in the string ?
Input: 
String str=”aaabbabbab”;
Output: aaaaa

(3) find ram occurrences in the string ?
Input: 
String str=“Ram went to Rampur with balram and also sitaram”;
Output: 4

(4) Count number of palindromic substrings ?
Input: 
String str=“abc”; 
Output: 3

(5) from given string find longest vowel sub string?
Input: 
String str=“helloooaeiooouworld”;
Output: oooaeiooou

(6) CHECK FOR STRING ROTATION EITHER FROM RIGHT OR LEFT IF YES THEN RETURN TRUE OTHERWISE FALSE ?
left rotated case, 
Input: 
String originalString = "decode";  , toBeChecked = "codede";
Output: true.
Right rotated case, 
Input: 
String originalString = "decode"; , toBeChecked = "dedeco";
Output: true.
no rotated but swap, 
Input: 
String originalString = "decode"; , toBeChecked = "deocde";
Output: false.

(7) Longest Substring Without Repeating Characters
Input: 
String str="abcabcbb"; 
Output: "abc"

(8) Check if a String is a Rotation of Another Using Only One Call to in
Input:
String str="waterbottle"; "erbottlewat" 
Output: true

(9) String Compression
Input: 
String str="aabcccccaaa";
Output: "a2b1c5a3"

(10) Valid Palindrome after Removing At Most One Character
Input:
String str="abca" 
Output: true

(11) First Non-Repeating Character
Input: 
String str="loveleetcode";
Output: v

(12) Group Anagrams
Input: ["eat","tea","tan","ate","nat","bat"] → Output: [["eat","tea","ate"],["tan","nat"],["bat"]]

(13) Roman to Integer
Input: "MCMXCIV" → Output: 1994

(14) Isomorphic Strings
Input: "egg", "add" → Output: true

(15)Check if One String is a Subsequence of Another
Input: "abc", "ahbgdc" → Output: true

(16) Check Balanced Parentheses
Input: "({[]})" → Output: true




