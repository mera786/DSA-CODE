
                                                                       âœ… HashMap Questions

ðŸŸ¢ Easy
*********

(1) Add the following key-value pairs to a HashMap.?
Input:
[(1, "Apple"), (2, "Banana"), (3, "Cherry")]
Output:
{1=Apple, 2=Banana, 3=Cherry}

(2) Retrieve a value from a HashMap using the given key.?
Input:
Map = {1=Apple, 2=Banana, 3=Cherry}
Key = 2
Output:
Banana

(3) Check if a given key exists in the HashMap.?
Input:
Map = {1=Apple, 2=Banana, 3=Cherry}
Key = 3
Output:
true

(4) Remove a key-value pair from the HashMap using the given key.
Input:
Map = {1=Apple, 2=Banana, 3=Cherry}
Key to remove = 2
Output:
Updated Map = {1=Apple, 3=Cherry}

(5) Iterate through all the keys and values in the given HashMap and print each key-value pair.?
Input:
Map = {1=Apple, 2=Banana, 3=Cherry}
Output:
1 => Apple  
2 => Banana  
3 => Cherry

(6) Find the number of key-value pairs present in the given HashMap. ?
Input:
Map = {1=Apple, 2=Banana, 3=Cherry}
Output:
Size = 3

(7) Remove all key-value pairs from the given HashMap.?
Input:
Map = {1=Apple, 2=Banana, 3=Cherry}
Output:
Map = {} (an empty map)

(8) Convert all the keys from the given HashMap into a List.
Input:
Map = {1=Apple, 2=Banana, 3=Cherry}
Output:
List = [1, 2, 3]

(9) Check whether the given HashMap is empty or not.?
Output:
true

(10) Copy all key-value pairs from one HashMap into another. ?
Input:
Map1 = {1=Apple, 2=Banana}
Map2 = {}
Operation:
Copy contents of Map1 into Map2.
Output:
Map2 = {1=Apple, 2=Banana}




ðŸŸ¡ Medium
*************

(1) Count the frequency of each character in the given string. ?
Input:
String = "banana";
Output:
b = 1  
a = 3  
n = 2

(2) Count the frequency of each word in the given sentence. ?
Input:
String Sentence = "apple banana apple cherry banana apple";
Output:
apple = 3  
banana = 2  
cherry = 1

(3) Find the first non-repeating character in the given string. If all characters repeat, return an indication such as null. ?
Input:
String str = "swiss";
Output:
w

(4) How do you merge two maps by summing the values of common keys in Java?
Input:
        // First map
        Map<String, Integer> map1 = new HashMap<>();
        map1.put("a", 1);
        map1.put("b", 2);

        // Second map
        Map<String, Integer> map2 = new HashMap<>();
        map2.put("b", 3);
        map2.put("c", 4);
Output:
Merged Map: {a=1, b=5, c=4}


(5) How do you group a list of strings by their lengths in Java?
Input:
List<String> words = Arrays.asList("apple", "bat", "car", "banana", "dog", "elephant");
Expected Output:
{
  3 = [bat, car, dog],
  5 = [apple],
  6 = [banana],
  8 = [elephant]
}

(6) How do you find duplicate elements in an array in Java?
Input:
int[] arr = {1, 2, 3, 2, 4, 5, 1, 6};
Output:
[1, 2]

 (7) How do you store and retrieve Student objects using roll number as the key in Java?
Input:
Student s1 = new Student(101, "Alice", 85);  
Student s2 = new Student(102, "Bob", 90);  
Retrieve student with roll number 101
Output :
Student{rollNumber=101, name='Alice', marks=85}

(8) How do you create a map with default values for missing keys in Java?
Input:
You have a list of keys:
List<String> keys = Arrays.asList("a", "b", "c");
You want to create a map where each key maps to the default value 0.
Output:
{a=0, b=0, c=0}

(9) Given an array of strings, group the anagrams together using a Map.?
Input:
String [] arr = {"eat", "tea", "tan", "ate", "nat", "bat"};
Output:
[
  ["eat", "tea", "ate"],
  ["tan", "nat"],
  ["bat"]
]


ðŸ”´ Hard
LRU cache using HashMap + LinkedList.

Find subarrays with sum = K using prefix sum + map.

Implement Trie using HashMap.

Check if two strings are isomorphic using maps.

Detect if two strings are anagrams using frequency map.

Track frequency of API hits in a time window.

Find top K frequent elements.

Implement a phonebook using HashMap<String, List<String>>.

Implement multilevel cache system using multiple maps.

Store and retrieve nested JSON-like structures using HashMap.

âœ… LinkedHashMap Questions
ðŸŸ¢ Easy
Create a LinkedHashMap and add key-value pairs.

Print entries in insertion order.

Access values using keys.

Remove and re-insert a key and see order change.

Check if key/value exists.

Clone a LinkedHashMap.

Get all keys and values in insertion order.

Convert LinkedHashMap to HashMap.

Iterate using forEach.

Convert to list of key-value pairs.

ðŸŸ¡ Medium
Maintain order of most recently accessed elements.

Use LinkedHashMap to preserve order in frequency counter.

Implement fixed-capacity LRU cache using LinkedHashMap (with removeEldestEntry()).

Build a product recommendation list in user preference order.

Track order of student submissions.

Merge two maps while keeping the latest inserted entries.

Track recently searched items.

Count unique IP addresses and maintain insertion order.

Reorder a map based on custom access order logic.

Save order-sensitive game state using map.

ðŸ”´ Hard
Fully implement LRU cache using LinkedHashMap with eviction logic.

Multi-threaded request tracker with ordered keys.

Track session IDs and last access timestamps.

Design a time-sensitive leaderboard.

Implement undo feature using LinkedHashMap.

Use as ordered dependency tracker.

Merge log events from multiple sources by timestamp.

Simulate navigation history with unique entries and recent order.

Maintain recent login IPs per user (user â†’ LinkedHashMap of IPs).

Custom serialization of ordered entries to file.

âœ… TreeMap Questions
ðŸŸ¢ Easy
Create a TreeMap and add key-value pairs.

Retrieve value by key.

Print keys in sorted order.

Get the smallest and largest keys.

Use ceilingKey() and floorKey().

Remove entries and maintain sort order.

Iterate using entrySet().

Check existence of a key.

Print keys in descending order.

Get sub-map using a key range.

ðŸŸ¡ Medium
Implement a numeric scoreboard using TreeMap<Integer, String>.

Group students by marks and print top scorers.

Use TreeMap to build a prefix directory.

Simulate calendar event manager with time sorting.

Implement stock price tracker sorted by time.

Use comparator to sort by custom object fields.

Range queries: Get all entries within a date range.

Find the next closest deadline.

Reverse the order using descendingMap().

Schedule priority tasks based on time.

ðŸ”´ Hard
Implement a Range Map (e.g., price slabs) with TreeMap.

Store employee data sorted by salary, then by name.

Build an interval tree using TreeMap keys.

Track dynamic inventory with range queries.

Implement auto-suggest sorted by frequency.

Range-based discount mapping (order total â†’ discount).

Create custom ranking system.

Maintain transaction history sorted by timestamps.

Use TreeMap for a version control system.

Merge two TreeMaps with range overlap handling.
